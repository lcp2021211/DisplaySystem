#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/Motag');

const http = require('http');
const app = require('../app');
const proxies = require('../config/proxies');
const debug = require('debug')('server2:server');
const Mappings = require('../models/proxyToClient');

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '5000');
app.set('port', port);
global.ids = 0;

/**
 * Create HTTP server.
 * Listen on provided port, on all network interfaces.
 */
let server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);

	initialize();
}

function initialize() {
	Mappings.remove({}, err => {
		if (err) {
			console.error('error removing old:', err);
		} else {
			proxies.forEach(proxy => {
				new Mappings({
					client: [],
					proxy: proxy,
					maxSize: 5
				}).save();
			});
			// Store undistributed clients
			new Mappings({
				client: [],
				proxy: 'null',
				maxSize: -1
			}).save();
		}
	});

	// Refresh the information of network each 60 secs
	setInterval(() => {
		global.realTime = new Map();
	}, 60000);
}
